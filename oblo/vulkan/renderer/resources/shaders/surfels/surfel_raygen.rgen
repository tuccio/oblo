#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

#include <renderer/random/random>
#include <renderer/random/sampling>
#include <surfels/buffers/surfel_buffer_bindings>
#include <surfels/buffers/surfel_data_r>
#include <surfels/buffers/surfel_grid_r>
#include <surfels/buffers/surfel_lighting_data_in_r>
#include <surfels/buffers/surfel_lighting_data_out_w>
#include <surfels/surfel_data>

layout(binding = 11) uniform accelerationStructureEXT u_SceneTLAS;

layout(std430, binding = 12) restrict buffer b_TotalRayCount
{
    uint g_TotalRayCount;
};

layout(std430, binding = SURFEL_LIGHT_ESTIMATOR_DATA_BINDING) restrict buffer b_OutSurfelsLightEstimator
{
    surfel_light_estimator_data g_SurfelsLightEstimatorData[];
};

layout(location = 0) rayPayloadEXT vec3 r_HitColor;

layout(push_constant) uniform c_PushConstants
{
    uint maxRayPaths;
    uint randomSeed;
    float giMultiplier;
}
g_Constants;

// Adapted from
// https://github.com/Apress/ray-tracing-gems/blob/master/Ch_25_Hybrid_Rendering_for_Real-Time_Ray_Tracing/MultiscaleMeanEstimator.hlsl
vec3 MultiscaleMeanEstimator(vec3 y, in vec3 mean, inout surfel_light_estimator_data data, float shortWindowBlend)
{
    vec3 shortMean = data.shortTermMean;
    float vbbr = data.varianceBasedBlendReduction;
    vec3 variance = data.variance;
    float inconsistency = data.inconsistency;

    // Suppress fireflies.
    {
        vec3 dev = sqrt(max(vec3(1e-5), variance));
        vec3 highThreshold = 0.1 + shortMean + dev * 8;
        vec3 overflow = max(vec3(0), y - highThreshold);
        y -= overflow;
    }

    vec3 delta = y - shortMean;
    shortMean = mix(shortMean, y, shortWindowBlend);
    vec3 delta2 = y - shortMean;

    // This should be a longer window than shortWindowBlend to avoid bias
    // from the variance getting smaller when the short-term mean does.
    float varianceBlend = shortWindowBlend * 0.5;
    variance = mix(variance, delta * delta2, varianceBlend);
    vec3 dev = sqrt(max(vec3(1e-5), variance));

    vec3 shortDiff = mean - shortMean;

    float relativeDiff = dot(vec3(0.299, 0.587, 0.114), abs(shortDiff) / max(vec3(1e-5), dev));
    inconsistency = mix(inconsistency, relativeDiff, 0.08);

    float varianceBasedBlendReduction =
        clamp(dot(vec3(0.299, 0.587, 0.114), 0.5 * shortMean / max(vec3(1e-5), dev)), 1.0 / 32, 1);

    vec3 catchUpBlend = clamp(smoothstep(0, 1, relativeDiff * max(vec3(0.02), inconsistency - 0.2)), 1.0 / 256, 1);
    catchUpBlend *= vbbr;

    vbbr = mix(vbbr, varianceBasedBlendReduction, 0.1);
    mean = mix(mean, y, saturate(catchUpBlend));

    // Output
    data.shortTermMean = shortMean;
    data.varianceBasedBlendReduction = vbbr;
    data.variance = variance;
    data.inconsistency = inconsistency;

    return mean;
}

void main()
{
    const uint surfelId = gl_LaunchIDEXT.x;
    const surfel_data surfel = g_SurfelData[surfelId];

    if (!surfel_data_is_alive(surfel))
    {
        g_OutSurfelsLighting[surfelId] = surfel_lighting_data_new();
        return;
    }

    uint randomSeed = random_seed(g_Constants.randomSeed, surfelId);

    uint numRays = surfel.requestedRays;

    if (g_TotalRayCount > g_Constants.maxRayPaths && g_TotalRayCount > 0)
    {
        const float numRaysFloat = float(numRays * g_Constants.maxRayPaths) / g_TotalRayCount;
        // Give it a chance to shoot a ray when we have a remainder in the division
        const bool extraRay = random_uniform_1d(randomSeed) < mod(numRaysFloat, 1.f);
        numRays = uint(numRaysFloat) + (extraRay ? 1 : 0);
    }

    if (numRays == 0)
    {
        return;
    }

    vec3 irradiance = vec3(0);

    const vec3 origin = surfel_data_world_position(surfel);
    const vec3 N = surfel_data_world_normal(surfel);

    for (uint i = 0; i < numRays; ++i)
    {
        const vec3 direction = random_sample_cosine_hemisphere(N, random_uniform_2d(randomSeed));

        const float tMin = 1e-2f;
        const float tMax = 1e6f;

        traceRayEXT(u_SceneTLAS,
            gl_RayFlagsOpaqueEXT,
            0xff, // cull mask
            0,    // STB record offset
            0,    // STB record stride
            0,    // Miss index
            origin,
            tMin,
            direction,
            tMax,
            0 // payload location
        );

        const vec3 rayContribution = g_Constants.giMultiplier * r_HitColor;

        const float sampleProbability = max(1e-2, dot(direction, N));
        irradiance += rayContribution / sampleProbability;
        irradiance += rayContribution;
    }

    irradiance /= numRays;

    const float shortWindowBlend = 0.08f;

    surfel_light_estimator_data estimator = g_SurfelsLightEstimatorData[surfelId];

    const vec3 mean =
        MultiscaleMeanEstimator(irradiance, g_InSurfelsLighting[surfelId].irradiance, estimator, shortWindowBlend);

    surfel_lighting_data result;
    result.irradiance = mean;

    g_OutSurfelsLighting[surfelId] = result;
    g_SurfelsLightEstimatorData[surfelId] = estimator;
}
