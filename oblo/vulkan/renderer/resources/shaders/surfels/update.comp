#version 460

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_buffer_reference : require
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_control_flow_attributes : require

#include <ecs/entity_set>
#include <renderer/geometry/barycentric>
#include <renderer/instances>
#include <renderer/meshes/mesh_attributes>
#include <renderer/meshes/mesh_data>
#include <renderer/meshes/mesh_indices>
#include <renderer/meshes/mesh_table>
#include <renderer/transform>
#include <surfels/buffers/surfel_data_rw>
#include <surfels/buffers/surfel_grid_rw>
#include <surfels/buffers/surfel_spawn_data_rw>
#include <surfels/buffers/surfel_stack_rw>
#include <surfels/grid_utils>
#include <surfels/surfel_data>
#include <visibility/visibility_buffer>

layout(local_size_x = OBLO_SUBGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform c_PushConstants
{
    vec3 cameraCentroid;
    uint maxSurfels;
    uint currentTimestamp;
}
g_Constants;

void surfel_kill(in uint surfelId)
{
#if OBLO_DEBUG_PRINTF
    debugPrintfEXT("[UPDATE] Killed surfel: %u\n", surfelId);
#endif

    g_SurfelData[surfelId] = surfel_data_invalid();
    g_SurfelSpawnData[surfelId] = surfel_spawn_data_invalid();

    surfel_stack_free(surfelId);
}

void surfel_commit_to_grid(in uint surfelId, in uint cellIndex)
{
    const uint prev = atomicAdd(g_SurfelGridCells[cellIndex].surfelsCount, 1);
    // debugPrintfEXT("Cell %u Count: %u\n", cellIndex, prev + 1);
}

void main()
{
#if OBLO_DEBUG_PRINTF
    if (gl_GlobalInvocationID.x == 0)
    {
        debugPrintfEXT("[UPDATE] Surfels alive: %u\n", g_Constants.maxSurfels - g_SurfelStackHeader.available);
    }
#endif

    const uint surfelId = gl_GlobalInvocationID.x;

    if (surfelId >= g_Constants.maxSurfels)
    {
        return;
    }

    const surfel_spawn_data surfel = g_SurfelSpawnData[surfelId];

    if (!surfel_spawn_data_is_alive(surfel))
    {
        return;
    }

    ecs_entity_set_entry entitySetEntry;

    if (!ecs_entity_set_try_find(surfel.entity, entitySetEntry))
    {
        surfel_kill(surfelId);
        return;
    }

    visibility_buffer_data vb;

    visibility_buffer_parse_instance_ids(entitySetEntry.globalInstanceId, vb);
    visibility_buffer_parse_meshlet_ids(surfel.packedMeshletAndTriangleId, vb);

    const mesh_handle mesh = OBLO_INSTANCE_DATA(vb.instanceTableId, i_MeshHandles, vb.instanceId);
    const transform transform = OBLO_INSTANCE_DATA(vb.instanceTableId, i_TransformBuffer, vb.instanceId);

    // Read the mesh data
    const mesh_table meshTable = mesh_table_fetch(mesh);
    const uvec3 vertexIndices = mesh_get_meshlet_indices(meshTable, mesh, vb.meshletId, vb.meshletTriangleId);

    vec3 triangleWS[3];

    // Read the position, to see if the surfel falls within our grid
    [[unroll]] for (uint i = 0; i < 3; ++i)
    {
        const uint vertexId = vertexIndices[i];

        const vec3 vertexPosition = mesh_get_position(meshTable, vertexId);
        triangleWS[i] = (transform.localToWorld * vec4(vertexPosition, 1)).xyz;
    }

    barycentric_coords bc;
    bc.lambda = vec3(surfel.barycentricU, surfel.barycentricV, 1 - surfel.barycentricU - surfel.barycentricV);

    const vec3 positionWS = barycentric_interpolate(bc, triangleWS);

    const surfel_grid_header gridHeader = g_SurfelGridHeader;

    const ivec3 cell = surfel_grid_find_cell(gridHeader, positionWS);

    vec3 triangleNormal[3];

    // We accepted the surfel, time to update
    [[unroll]] for (uint i = 0; i < 3; ++i)
    {
        const uint vertexId = vertexIndices[i];

        const vec3 vertexNormal = mesh_get_normal(meshTable, vertexId);
        triangleNormal[i] = vertexNormal;
    }

    const vec3 N = normalize(barycentric_interpolate(bc, triangleNormal));
    const vec3 normalWS = normalize(mat3(transform.normalMatrix) * N);

    const float radius = surfel_estimate_radius(gridHeader, g_Constants.cameraCentroid, positionWS);

    surfel_data updatedData;
    updatedData.positionWS = positionWS;
    updatedData.normalWS = normalWS;
    updatedData.radius = radius;

    g_SurfelData[surfelId] = updatedData;

    surfel_scatter_to_grid(gridHeader, cell, surfelId, positionWS, radius);
}