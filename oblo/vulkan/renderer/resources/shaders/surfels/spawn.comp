#version 460

#extension GL_GOOGLE_include_directive : require

#include <renderer/debug/printf>
#include <renderer/random/random>
#include <surfels/buffers/surfel_data_w>
#include <surfels/buffers/surfel_lighting_data_in_w>
#include <surfels/buffers/surfel_lighting_data_out_w>
#include <surfels/buffers/surfel_spawn_data_w>
#include <surfels/buffers/surfel_stack_rw>

layout(std430, binding = 0) restrict readonly buffer b_TileCoverage
{
    surfel_tile_data g_TileData[];
};

layout(local_size_x = OBLO_SUBGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform c_PushConstants
{
    uint srcElements;
    uint randomSeed;
}
g_Constants;

void main()
{
    const uint globalIndex = gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationIndex;
    uint randomSeed = random_seed(g_Constants.randomSeed, globalIndex);

    if (globalIndex >= g_Constants.srcElements)
    {
        return;
    }

    // This should really depend on the coverage
    const float skipProbability = 0.f;

    if (random_uniform_1d(randomSeed) < skipProbability)
    {
        return;
    }

    // We could consider a random threshold instead
    const float spawnThreshold = NO_SURFELS_NEEDED;

    const surfel_tile_data tile = g_TileData[globalIndex];

    if (ecs_entity_is_valid(tile.spawnData.entity) && tile.worstPixelCoverage < 0.15)
    {
        uint newSurfelId;
        const bool allocated = surfel_stack_allocate(newSurfelId);

        if (allocated)
        {
            g_SurfelSpawnData[newSurfelId] = tile.spawnData;

            // This might not be necessary because we reset in the rgen shader on dead surfels
            g_InSurfelsLighting[newSurfelId] = surfel_lighting_data_new();
            g_OutSurfelsLighting[newSurfelId] = surfel_lighting_data_new();
        }
        else
        {
#if OBLO_DEBUG_PRINTF
            // debugPrintfEXT("[SPAWN] Failed to allocate surfel\n");
#endif
        }
    }
}