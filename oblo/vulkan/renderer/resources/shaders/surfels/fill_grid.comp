#version 460

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_buffer_reference : require
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_control_flow_attributes : require

#include <renderer/debug/printf>
#include <renderer/transform>
#include <surfels/buffers/surfel_data_r>
#include <surfels/buffers/surfel_grid_data_w>
#include <surfels/buffers/surfel_grid_r>
#include <surfels/grid_utils>
#include <surfels/surfel_data>
#include <visibility/visibility_buffer>

layout(std430, binding = 0) restrict buffer b_SurfelsGridFill
{
    uint g_SurfelGridCellNextSurfelIndex[];
};

layout(local_size_x = OBLO_SUBGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

void surfel_commit_to_grid(in uint surfelId, in uint cellIndex)
{
    const uint surfelsBegin = g_SurfelGridCells[cellIndex].surfelsBegin;
    const uint surfelIndex = atomicAdd(g_SurfelGridCellNextSurfelIndex[cellIndex], 1);

    // debug_assert(surfelIndex < g_SurfelGridCells[cellIndex].surfelsCount);

    if (surfelIndex < g_SurfelGridCells[cellIndex].surfelsCount)
    {
        g_SurfelGridCellData[surfelsBegin + surfelIndex] = surfelId;
    }
    else
    {
#if OBLO_DEBUG_PRINTF
        debugPrintfEXT("surfelIndex >= g_SurfelGridCells[cellIndex].surfelsCount -> [%u %u]",
            surfelIndex,
            g_SurfelGridCells[cellIndex].surfelsCount);
#endif
    }
}

void main()
{
    const uint surfelId = gl_GlobalInvocationID.x;

    const surfel_grid_header gridHeader = g_SurfelGridHeader;

    if (surfelId >= gridHeader.maxSurfels)
    {
        return;
    }

    const surfel_data surfel = g_SurfelData[surfelId];

    if (!surfel_data_is_alive(surfel))
    {
        return;
    }

    const vec3 positionWS = surfel_data_world_position(surfel);
    const ivec3 cell = surfel_grid_find_cell(gridHeader, positionWS);

    const float radius = surfel_data_world_radius(surfel);

    surfel_scatter_to_grid(gridHeader, cell, surfelId, positionWS, radius);
}