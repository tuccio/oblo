#version 460

#extension GL_ARB_gpu_shader_int64 : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_samplerless_texture_functions : require
#extension GL_GOOGLE_include_directive : require
#extension GL_KHR_shader_subgroup_quad : require
#extension GL_EXT_control_flow_attributes : enable

#include <renderer/camera>
#include <renderer/debug>
#include <renderer/geometry/volumes>
#include <renderer/instances>
#include <renderer/material>
#include <renderer/math>
#include <renderer/meshes/mesh_attributes>
#include <renderer/meshes/mesh_data>
#include <renderer/meshes/mesh_indices>
#include <renderer/meshes/mesh_table>
#include <renderer/shading/normal_mapping>
#include <renderer/shading/pbr>
#include <renderer/textures>
#include <renderer/transform>
#include <visibility/visibility_shading>

vec4 visibility_shade(in visibility_shade_context ctx)
{
#ifdef OUT_MESHLET
    return vec4(debug_color_map(ctx.vb.meshletId), 1);
#endif

    // Read the instance data we need
    const mesh_handle mesh = OBLO_INSTANCE_DATA(ctx.vb.instanceTableId, i_MeshHandles, ctx.vb.instanceId);
    const transform transform = OBLO_INSTANCE_DATA(ctx.vb.instanceTableId, i_TransformBuffer, ctx.vb.instanceId);
    const gpu_material material = OBLO_INSTANCE_DATA(ctx.vb.instanceTableId, i_MaterialBuffer, ctx.vb.instanceId);

    triangle triangleWS;
    vec2 triangleUV0[3];
    vec3 triangleNormal[3];
    vec3 triangleTangent[3];
    vec3 triangleBitangent[3];

    // Read the mesh data
    const mesh_table meshTable = mesh_table_fetch(mesh);
    const uvec3 vertexIndices = mesh_get_meshlet_indices(meshTable, mesh, ctx.vb.meshletId, ctx.vb.meshletTriangleId);

    // Read the vertex data and transform everything in world space, we do lighting calculation in that space
    [[unroll]] for (uint i = 0; i < 3; ++i)
    {
        const uint vertexId = vertexIndices[i];

        const vec3 vertexPosition = mesh_get_position(meshTable, vertexId);
        triangleWS.v[i] = (transform.localToWorld * vec4(vertexPosition, 1)).xyz;

        const vec3 vertexNormal = mesh_get_normal(meshTable, vertexId);
        triangleNormal[i] = vertexNormal;

        const vec3 vertexTangent = mesh_get_tangent(meshTable, vertexId);
        triangleTangent[i] = vertexTangent;

        const vec3 vertexBitangent = mesh_get_bitangent(meshTable, vertexId);
        triangleBitangent[i] = vertexBitangent;

        triangleUV0[i] = mesh_get_uv0(meshTable, vertexId);
    }

    barycentric_coords bc, bcDDX, bcDDY;
    vec3 positionWS;

    if (!calculate_position_and_barycentric_coords(ctx.screenPos,
            ctx.resolution,
            triangleWS,
            positionWS,
            bc,
            bcDDX,
            bcDDY))
    {
        return vec4(0);
    }

    // Interpolate UV0 and calculate gradients
    const vec2 uv0 = barycentric_interpolate(bc, triangleUV0);

#if defined(OUT_UV0)
    return vec4(uv0, 0, 1);
#endif

    vec2 uv0DDX, uv0DDY;
    barycentric_partial_derivatives(bcDDX, bcDDY, uv0, triangleUV0, uv0DDX, uv0DDY);

#if defined(OUT_NORMAL_MAP)
    vec3 normalWS;

    if (material.normalMapTexture != 0)
    {
        const vec4 sampledNormal =
            texture_sample_2d_grad(material.normalMapTexture, OBLO_SAMPLER_LINEAR, uv0, uv0DDX, uv0DDY);

        const vec3 T = normalize(barycentric_interpolate(bc, triangleTangent));
        const vec3 B = normalize(barycentric_interpolate(bc, triangleBitangent));
        const vec3 N = normalize(barycentric_interpolate(bc, triangleNormal));

        normalWS = normal_mapping(sampledNormal, T, B, N, mat3(transform.normalMatrix));
    }
    else
    {
        const vec3 N = barycentric_interpolate(bc, triangleNormal);
        normalWS = normalize(mat3(transform.normalMatrix) * N);
    }

    return vec4(normalWS * .5f + .5f, 1);
#endif

#if defined(OUT_NORMALS)
    const vec3 N = barycentric_interpolate(bc, triangleNormal);
    const vec3 normalWS = normalize(mat3(transform.normalMatrix) * N);
    return vec4(normalWS * .5f + .5f, 1);
#endif

#if defined(OUT_TANGENTS)
    const vec3 T = normalize(barycentric_interpolate(bc, triangleTangent));
    const vec3 tangentWS = normalize(mat3(transform.normalMatrix) * T);
    return vec4(tangentWS * .5f + .5f, 1);
#endif

#if defined(OUT_BITANGENTS)
    const vec3 B = normalize(barycentric_interpolate(bc, triangleBitangent));
    const vec3 bitangentWS = normalize(mat3(transform.normalMatrix) * B);
    return vec4(bitangentWS * .5f + .5f, 1);
#endif

#if defined(OUT_ALBEDO)
    vec3 outAlbedo = material.albedo;

    if (material.albedoTexture != 0)
    {
        const vec3 albedo =
            texture_sample_2d_grad(material.albedoTexture, OBLO_SAMPLER_LINEAR, uv0, uv0DDX, uv0DDY).xyz;

        outAlbedo *= albedo;
    }

    return vec4(outAlbedo, 1);
#endif

#if defined(OUT_ROUGHNESS) || defined(OUT_METALNESS)
    float metalness = material.metalness;
    float roughness = material.roughness;

    if (material.metalnessRoughnessTexture != 0)
    {
        const vec4 metalnessRoughness =
            texture_sample_2d_grad(material.metalnessRoughnessTexture, OBLO_SAMPLER_LINEAR, uv0, uv0DDX, uv0DDY);

        metalness *= metalnessRoughness.x;
        roughness *= metalnessRoughness.y;
    }

    #if defined(OUT_ROUGHNESS)
    return vec4(vec3(roughness), 1);
    #else
    return vec4(vec3(metalness), 1);
    #endif

#endif

#if defined(OUT_EMISSIVE)
    vec3 emitted = material.emissive;

    if (material.emissiveTexture != 0)
    {
        const vec3 emissive =
            texture_sample_2d_grad(material.emissiveTexture, OBLO_SAMPLER_LINEAR, uv0, uv0DDX, uv0DDY).xyz;

        emitted *= emissive;
    }

    return vec4(emitted / (emitted + 1), 1);
#endif
}
