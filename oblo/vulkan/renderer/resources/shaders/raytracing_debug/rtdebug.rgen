#version 460

#extension GL_ARB_gpu_shader_int64 : require
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_samplerless_texture_functions : require
#extension GL_GOOGLE_include_directive : require

#extension GL_EXT_debug_printf : enable

#include <raytracing_debug/common>
#include <renderer/camera>
#include <renderer/math>
#include <renderer/meshes/mesh_table>
#include <renderer/quad>

layout(binding = 16) uniform b_CameraBuffer
{
    camera_buffer g_Camera;
};

layout(binding = 11) uniform accelerationStructureEXT u_SceneTLAS;

layout(binding = 12, rgba8) uniform restrict writeonly image2D t_OutShadedImage;

layout(push_constant) uniform c_PushConstants
{
    uvec2 resolution;
}
g_Constants;

struct rt_instance_id
{
    uint instanceTableId;
    uint instanceId;
};

rt_instance_id rt_instance_id_from_custom_index(uint customIndex)
{
    rt_instance_id r;
    r.instanceTableId = customIndex >> 20;
    r.instanceId = customIndex & ((1u << 20) - 1);
    return r;
}

layout(location = 0) rayPayloadEXT vec3 r_HitColor;

void main()
{
    const vec2 positionNDC = screen_to_ndc(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy);

    const vec3 origin = g_Camera.position;
    const vec3 direction = camera_ray_direction(g_Camera, positionNDC);

    const float tMin = 1e-2f;
    const float tMax = 1e6f;

    r_HitColor = vec3(.015);

    traceRayEXT(u_SceneTLAS,
        gl_RayFlagsNoneEXT,
        0xff, // cull mask
        0,    // STB record offset
        0,    // STB record stride
        0,    // Miss index
        origin,
        tMin,
        direction,
        tMax,
        0 // payload location
    );

    if (gl_LaunchIDEXT.xy == gl_LaunchSizeEXT.xy / 2)
    {
        r_HitColor = vec3(1, 0, 0);

        // debugPrintfEXT("screen: [%u, %u]\n", gl_LaunchIDEXT.x, gl_LaunchIDEXT.y);
        // debugPrintfEXT("res: [%u, %u]\n", gl_LaunchSizeEXT.x, gl_LaunchSizeEXT.y);
        // debugPrintfEXT("ndc: [%f, %f]\n", positionNDC.x, positionNDC.y);
        // debugPrintfEXT("origin: [%f, %f, %f]\n", origin.x, origin.y, origin.z);
        // debugPrintfEXT("direction: [%f, %f, %f]\n", direction.x, direction.y, direction.z);
    }

    imageStore(t_OutShadedImage, ivec2(gl_LaunchIDEXT.xy), vec4(r_HitColor, 1));
}