#version 460

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_control_flow_attributes : enable
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_ARB_gpu_shader_int64 : require

#include <renderer/debug/printf>
#include <renderer/math>
#include <renderer/motion_vectors>
#include <renderer/textures>
#include <renderer/transform>
#include <visibility/visibility_buffer>
#include <visibility/visibility_utils>

layout(binding = 0, r8) uniform restrict readonly image2D t_InShadow;
layout(binding = 1, r8) uniform restrict readonly image2D t_InShadowMean;
layout(binding = 2) uniform texture2D t_InHistory;

layout(binding = 4, r8) uniform restrict image2D t_InDisocclusionMask;
layout(binding = 5, OBLO_MOTION_VECTORS_FORMAT) uniform restrict image2D t_InMotionVectors;

layout(binding = 8, r8) uniform restrict writeonly image2D t_OutFiltered;

layout(push_constant) uniform c_PushConstants
{
    float temporalAccumulationFactor;
}
g_Constants;

// We run 8x8 groups
const uint g_ThreadLocalSize = 8;

layout(local_size_x = g_ThreadLocalSize, local_size_y = g_ThreadLocalSize, local_size_z = 1) in;

ivec2 apply_offset_clamp(in ivec2 pixel, in uvec2 offset, in uvec2 resolution)
{
    return ivec2(min(int(resolution.x), int(pixel.x + offset.x)), min(int(resolution.y), int(pixel.y + offset.y)));
}

vec2 reproject_coords(in uvec2 coords, in uvec2 resolution)
{
    const vec4 texel = imageLoad(t_InMotionVectors, ivec2(coords));
    return motion_vectors_reproject_uv(texel, coords, resolution);
}

void main()
{
    const uvec2 resolution = imageSize(t_InShadow);
    const uvec2 screenPos = gl_GlobalInvocationID.xy;

    if (screenPos.x >= resolution.x || screenPos.y >= resolution.y)
    {
        return;
    }

    const float shadow = imageLoad(t_InShadow, ivec2(screenPos)).x;
    const float mean = imageLoad(t_InShadowMean, ivec2(screenPos)).x;

    // TODO: If the mean is 0 or 1 for whole whole group, we might also skip the filtering
    // Note: we use the E[X] instead of E[X^2] because we assume 1 ray per pixel, and shadows are either 0 or 1
    const float mean2 = mean * mean;
    float variance = saturate(mean - mean2);

    const float highVarianceThreshold = 1e-2;
    const bool isHighVariance = variance > highVarianceThreshold;

    vec3 lastFramePositionWS;
    vec3 currentPositionWS;

    const vec2 historyUV = reproject_coords(screenPos, resolution);

    float history = 0.f;
    uint historySamplesCount = 0;
    float historyWeight = 0.f;

    if (historyUV.x >= 0 && historyUV.x < 1.f && historyUV.y >= 0 && historyUV.y < 1.f)
    {
        const float disocclusion = imageLoad(t_InDisocclusionMask, ivec2(screenPos)).x;

        if (disocclusion < .9f)
        {
            history = texture(sampler2D(t_InHistory, g_Samplers[OBLO_SAMPLER_LINEAR_REPEAT]), historyUV).x;
            historyWeight = g_Constants.temporalAccumulationFactor;

            // When variance is high, we boost the history contribution
            if (isHighVariance)
            {
                const float highVarianceBoost = 2.f;

                variance *= highVarianceBoost;
                historyWeight = 1.f;
            }
        }
        else
        {
            const float noHistoryVarianceBoost = 10.f;
            variance *= noHistoryVarianceBoost;
        }
    }

    const float deviation = sqrt(variance);
    const float hDeviation = .5f * deviation;

    const float nmin = mean - hDeviation;
    const float nmax = mean + hDeviation;

    const float clampedHistory = clamp(history, nmin, nmax);

    const float result = mix(shadow, clampedHistory, historyWeight);

    imageStore(t_OutFiltered, ivec2(screenPos), vec4(result, 0, 0, 1));
}