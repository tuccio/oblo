#version 460

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_control_flow_attributes : enable
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_ARB_gpu_shader_int64 : require

#include <renderer/camera>
#include <renderer/debug/printf>
#include <renderer/math>
#include <renderer/transform>
#include <visibility/visibility_buffer>
#include <visibility/visibility_utils>

layout(binding = 0, r8) uniform restrict readonly image2D t_InSource;
layout(binding = 1, r8) uniform restrict writeonly image2D t_OutFiltered;

layout(binding = 16) uniform b_CameraBuffer
{
    camera_buffer g_Camera;
};

const uint g_PassIndex = SHADOW_FILTER_PASS_INDEX;
const uint g_Stride = 1u << g_PassIndex;

// We run 8x8 groups
const uint g_ThreadLocalSize = 8;

// We only tap 3 pixels: the center, 1 at the left and 1 at the right, but each pass has different stride
const uint g_TapsPerPixel = 3;
const uint g_TapRadius = g_TapsPerPixel / 2;

const uint g_ShadowCacheSize = g_ThreadLocalSize + 2 * g_TapRadius * g_Stride;
const uint g_ShadowLoadsPerThread = (g_ShadowCacheSize + g_ThreadLocalSize - 1) / g_ThreadLocalSize;

shared float g_ShadowCache[g_ShadowCacheSize][g_ShadowCacheSize];

ivec2 apply_offset_clamp(in ivec2 pixel, in uvec2 offset, in uvec2 resolution)
{
    return ivec2(min(int(resolution.x), int(pixel.x + offset.x)), min(int(resolution.y), int(pixel.y + offset.y)));
}

void load_shadow_cache(in uvec2 resolution);

layout(local_size_x = g_ThreadLocalSize, local_size_y = g_ThreadLocalSize, local_size_z = 1) in;

void main()
{
    const uvec2 resolution = imageSize(t_InSource);

    load_shadow_cache(resolution);

    memoryBarrierShared();
    barrier();

    const uvec2 screenPos = gl_GlobalInvocationID.xy;

    if (screenPos.x >= resolution.x || screenPos.y >= resolution.y)
    {
        return;
    }

    const uvec2 center = uvec2(g_Stride) + gl_LocalInvocationID.xy;

    float result = 0.f;

    const int k = int(g_TapRadius);

    // TODO: If the mean is 0 or 1, we might skip this loop
    // TODO: We should implement edge-stopping (see EAW Ã  trous)

    [[unroll]] for (int y = -k; y <= k; ++y)
    {
        [[unroll]] for (int x = -k; x <= k; ++x)
        {
            const uvec2 coords = center + uvec2(x, y) * g_Stride;
            const float shadow = g_ShadowCache[coords.y][coords.x];
            result += shadow;
        }
    }

    result /= float(g_TapsPerPixel * g_TapsPerPixel);

    imageStore(t_OutFiltered, ivec2(screenPos), vec4(result, 0, 0, 1));
}

void load_shadow_cache(in uvec2 resolution)
{
    const uvec2 firstGroupPixel = gl_WorkGroupID.xy * gl_WorkGroupSize.xy;
    const ivec2 firstPixelToLoad = max(ivec2(0), ivec2(firstGroupPixel) - ivec2(g_Stride));

    [[unroll]] for (uint loadY = 0; loadY < g_ShadowLoadsPerThread; ++loadY)
    {
        [[unroll]] for (uint loadX = 0; loadX < g_ShadowLoadsPerThread; ++loadX)
        {
            const uvec2 offset = gl_WorkGroupSize.xy * uvec2(loadX, loadY) + gl_LocalInvocationID.xy;

            if (offset.x < g_ShadowCacheSize && offset.y < g_ShadowCacheSize)
            {
                const ivec2 coords = apply_offset_clamp(firstPixelToLoad, offset, resolution);
                const vec4 pixel = imageLoad(t_InSource, coords);

                g_ShadowCache[offset.y][offset.x] = pixel.x;
            }
        }
    }
}