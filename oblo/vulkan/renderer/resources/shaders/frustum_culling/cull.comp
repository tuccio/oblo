#version 460

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_buffer_reference : require
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_EXT_shader_16bit_storage : require

#include <renderer/camera>
#include <renderer/constants>
#include <renderer/instances>
#include <renderer/intersection>
#include <renderer/meshes>
#include <renderer/transform>

layout(local_size_x = OBLO_SUBGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0) uniform b_CameraBuffer
{
    camera_buffer g_Camera;
};

layout(std430, binding = 10) restrict writeonly buffer b_OutDrawCount
{
    uint outDrawCount;
};

layout(std430, binding = 11) restrict writeonly buffer b_PreCullingIdMap
{
    uint preCullingIdMap[];
};

layout(push_constant) uniform c_PushConstants
{
    uint instanceTableId;
    uint numberOfDraws;
}
g_Constants;

aabb transform_aabb(in aabb box, in mat4 m)
{
    vec3 corners[8];

    corners[0] = vec3(box.min.x, box.min.y, box.min.z);
    corners[1] = vec3(box.max.x, box.min.y, box.min.z);
    corners[2] = vec3(box.min.x, box.max.y, box.min.z);
    corners[3] = vec3(box.max.x, box.max.y, box.min.z);
    corners[4] = vec3(box.min.x, box.min.y, box.max.z);
    corners[5] = vec3(box.max.x, box.min.y, box.max.z);
    corners[6] = vec3(box.min.x, box.max.y, box.max.z);
    corners[7] = vec3(box.max.x, box.max.y, box.max.z);

    aabb res;
    res.min = vec3(float_positive_infinity());
    res.max = vec3(float_negative_infinity());

    for (uint i = 0; i < 8; ++i)
    {
        const vec4 h = (m * vec4(corners[i], 1));
        const vec3 p = h.xyz;

        res.min = min(res.min, p);
        res.max = max(res.max, p);
    }

    return res;
}

void main()
{
    const uint drawId = gl_GlobalInvocationID.x;

    if (drawId >= g_Constants.numberOfDraws)
    {
        return;
    }

    const mesh_handle meshHandle = OBLO_INSTANCE_DATA(g_Constants.instanceTableId, i_MeshHandles, drawId);

    // Instance id and draw id are the same since we don't support instancing currently
    const transform instanceTransform = OBLO_INSTANCE_DATA(g_Constants.instanceTableId, i_TransformBuffer, drawId);

    const mesh_table table = mesh_table_fetch(meshHandle);
    const uint meshIndex = mesh_get_index(meshHandle);

    const mat4 localToWorld = instanceTransform.localToWorld;

    const aabb msBox = mesh_get_aabb(table, meshIndex);
    const aabb wsBox = transform_aabb(msBox, localToWorld);

    const bool isInView = intersects_or_contains(g_Camera.frustum, wsBox);

    if (!isInView)
    {
        return;
    }

    const uint index = atomicAdd(outDrawCount, 1);
    preCullingIdMap[index] = drawId;
}