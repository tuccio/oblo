#version 460

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_buffer_reference : require
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_EXT_debug_printf : enable

#include <renderer/camera>
#include <renderer/constants>
#include <renderer/intersection>
#include <renderer/meshes>
#include <renderer/time>
#include <renderer/transform>

layout(local_size_x = OBLO_SUBGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

struct vk_draw_indirect_command
{
    uint vertexCount;
    uint instanceCount;
    uint firstVertex;
    uint firstInstance;
};

struct vk_draw_indexed_indirect_command
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
};

#ifndef DRAW_INDEXED
#define draw_command_t vk_draw_indirect_command
#else
#define draw_command_t vk_draw_indexed_indirect_command
#endif

layout(binding = 0) uniform b_CullingConfig
{
    uint g_numberOfDraws;
};

layout(binding = 1) uniform b_CameraBuffer
{
    camera_buffer g_Camera;
};

layout(binding = 2) uniform b_TimeBuffer
{
    time_buffer g_Time;
};

layout(std430, binding = 5) restrict readonly buffer b_InDrawCallsBuffer
{
    draw_command_t inDrawCalls[];
};

layout(std430, binding = 6) restrict buffer b_OutDrawCallsBuffer
{
    draw_command_t outDrawCalls[];
};

layout(std430, binding = 7) restrict readonly buffer i_TransformBuffer
{
    transform g_Transforms[];
};

aabb transform_aabb(in aabb box, in mat4 m)
{
    vec3 corners[8];

    corners[0] = vec3(box.min.x, box.min.y, box.min.z);
    corners[1] = vec3(box.max.x, box.min.y, box.min.z);
    corners[2] = vec3(box.min.x, box.max.y, box.min.z);
    corners[3] = vec3(box.max.x, box.max.y, box.min.z);
    corners[4] = vec3(box.min.x, box.min.y, box.max.z);
    corners[5] = vec3(box.max.x, box.min.y, box.max.z);
    corners[6] = vec3(box.min.x, box.max.y, box.max.z);
    corners[7] = vec3(box.max.x, box.max.y, box.max.z);

    aabb res;
    res.min = vec3(float_positive_infinity());
    res.max = vec3(float_negative_infinity());

    for (uint i = 0; i < 8; ++i)
    {
        const vec4 h = (m * vec4(corners[i], 1));
        const vec3 p = h.xyz;

        res.min = min(res.min, p);
        res.max = max(res.max, p);
    }

    return res;
}

void main()
{

    // {
    //     draw_command_t drawCmd = inDrawCalls[drawId];
    //     outDrawCalls[drawId] = drawCmd;
    //     return;
    // }

    const uint drawId = gl_GlobalInvocationID.x;

    if (drawId >= g_numberOfDraws)
    {
        return;
    }

    const mesh_handle meshHandle = g_MeshHandles[drawId];

    const mesh_table table = get_mesh_table(meshHandle);
    const uint meshIndex = get_mesh_index(meshHandle);

    // Instance id and draw id are the same since we don't support instancing currently
    const mat4 localToWorld = g_Transforms[drawId].localToWorld;

    // debugPrintfEXT("Mesh handle: 0x%x index: %u drawId: %u frame: %u\n",
    //     meshHandle.value,
    //     meshIndex,
    //     drawId,
    //     g_Time.frameIndex);

    const aabb msBox = get_mesh_aabb(table, meshIndex);
    const aabb wsBox = transform_aabb(msBox, localToWorld);

    draw_command_t drawCmd = inDrawCalls[drawId];
    drawCmd.instanceCount = intersects_or_contains(g_Camera.frustum, wsBox) ? 1 : 0;

    outDrawCalls[drawId] = drawCmd;
}