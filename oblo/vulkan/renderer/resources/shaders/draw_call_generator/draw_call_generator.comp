#version 460

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_buffer_reference : require
#extension GL_ARB_gpu_shader_int64 : require

#include <renderer/instances>
#include <renderer/math>
#include <renderer/meshes/mesh_data>

layout(local_size_x = OBLO_SUBGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

struct vk_draw_mesh_tasks_indirect_command_ext
{
    uint groupCountX;
    uint groupCountY;
    uint groupCountZ;
};

layout(std430, binding = 0) restrict readonly buffer b_InDrawCount
{
    uint inDrawCount;
};

layout(std430, binding = 1) restrict readonly buffer b_PreCullingIdMap
{
    uint inInstancesInFrustum[];
};

layout(std430, binding = 2) restrict buffer b_OutDrawCallsBuffer
{
    vk_draw_mesh_tasks_indirect_command_ext outDrawCalls[];
};

layout(push_constant) uniform c_PushConstants
{
    uint instanceTableId;
}
g_Constants;

void main()
{
    const uint drawId = gl_GlobalInvocationID.x;

    if (drawId >= inDrawCount)
    {
        return;
    }

    const uint preCullingId = inInstancesInFrustum[drawId];

    const mesh_handle meshHandle = OBLO_INSTANCE_DATA(g_Constants.instanceTableId, i_MeshHandles, preCullingId);
    const mesh_table table = mesh_table_fetch(meshHandle);

    const uint meshIndex = mesh_handle_as_index(meshHandle);
    const mesh_draw_range range = mesh_get_draw_range(table, meshIndex);

    // debugPrintfEXT("Draw count %u (draw id: %u)\n", range.meshletCount, drawId);
    vk_draw_mesh_tasks_indirect_command_ext drawCall;

    // Arbitrary number of threads per meshlet
    const uint groupsPerMeshlet = 1;

    drawCall.groupCountX = groupsPerMeshlet;
    drawCall.groupCountY = range.meshletCount;
    drawCall.groupCountZ = 1;

    outDrawCalls[drawId] = drawCall;
}